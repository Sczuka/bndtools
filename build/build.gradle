/*
 * build Gradle build script
 */

import aQute.bnd.gradle.Index
import aQute.bnd.osgi.Jar
import org.apache.tools.ant.filters.ReplaceTokens

def buildProject = project

/* Configure the workspace project */
configure(parent) {
  buildDir = buildProject.buildDir

  task build {
    dependsOn "${buildProject.path}:build"
    dependsOn "${buildProject.path}:checkNeeded"
    dependsOn "${buildProject.path}:releaseNeeded"
    dependsOn "${buildProject.path}:dist"
    description "Assembles and packages the ${buildProject.name} project."
    group 'build'
  }
  defaultTasks = [build.path]
}

task p2Plugins(type: Sync) {
  dependsOn build
  from    bnd('plugins').tokenize(',')
  into    "${buildDir}/plugins"
}

task p2FeatureProperties(type: WriteProperties) {
  inputs.files p2Plugins
  outputFile = file("${buildDir}/feature.properties")
  doFirst {
    property('master-version', String.format('%s-%tY%<tm%<td-%<tH%<tM%<tS-g%.7s',
                          bnd('gittag'),
                          Calendar.getInstance(TimeZone.getTimeZone("UTC")),
                          bnd('Git-SHA')))
    property('base-version', bnd('base.version'))
    fileTree(p2Plugins.destinationDir).each {
      new Jar(it).withCloseable { jar ->
        property("${jar.getBsn()}-version", jar.getVersion())
      }
    }
  }
}

task p2FeatureMain(type: Zip) {
  inputs.files p2FeatureProperties
  destinationDir = file("${buildDir}/features")
  archiveName    = 'bndtools.feature.jar'
  from             'feature/bndtools'
  include          'feature.xml'
  doFirst {
    Properties properties = new Properties()
    p2FeatureProperties.outputFile.withInputStream {
        properties.load(it)
    }
    filter(ReplaceTokens, tokens: properties )
  }
}

task p2FeatureM2e(type: Zip) {
  inputs.files p2FeatureProperties
  destinationDir = file("${buildDir}/features")
  archiveName    = 'bndtools.m2e.feature.jar'
  from             'feature/bndtools-m2e'
  include          'feature.xml'
  doFirst {
    Properties properties = new Properties()
    p2FeatureProperties.outputFile.withInputStream {
        properties.load(it)
    }
    filter(ReplaceTokens, tokens: properties )
  }
}

task p2FeaturePde(type: Zip) {
  inputs.files p2FeatureProperties
  destinationDir = file("${buildDir}/features")
  archiveName    = 'bndtools.pde.feature.jar'
  from             'feature/bndtools-pde'
  include          'feature.xml'
  doFirst {
    Properties properties = new Properties()
    p2FeatureProperties.outputFile.withInputStream {
        properties.load(it)
    }
    filter(ReplaceTokens, tokens: properties )
  }
}

task p2 {
  description 'Publish the p2 repositories.'
  group       'release'
  inputs.files p2Plugins, p2FeatureMain, p2FeatureM2e, p2FeaturePde, 'p2.xml', 'feature/category.xml'
  ext.destinationDir = file("${buildDir}/p2")
  outputs.dir destinationDir
  doLast {
    javaexec {
      classpath 'eclipse-3.5.2/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar'
      main = 'org.eclipse.equinox.launcher.Main'
      if (logger.isDebugEnabled()) {
        args '-consoleLog'
      }
      args '-application'
      args 'org.eclipse.ant.core.antRunner'
      args '-data'
      args buildDir
      args '-buildfile'
      args 'p2.xml'
      args 'p2Bndtools'
    }.assertNormalExitValue()

    javaexec {
      classpath 'eclipse-3.5.2/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar'
      main = 'org.eclipse.equinox.launcher.Main'
      if (logger.isDebugEnabled()) {
        args '-consoleLog'
      }
      args '-application'
      args 'org.eclipse.equinox.p2.publisher.CategoryPublisher'
      args '-data'
      args buildDir
      args '-metadataRepository'
      args uri(destinationDir)
      args '-categoryDefinition'
      args uri('feature/category.xml')
      args '-compress'
    }.assertNormalExitValue()
  }
}

task('index', type: Index) {
  description 'Index the p2 repositories.'
  dependsOn p2
  group 'release'
  repositoryName = "Bndtools ${version}"
  destinationDir = "${buildDir}/p2"
  gzip = true
  bundles fileTree("${buildDir}/p2/plugins") {
    include '**/*.jar'
  }
}

task dist(type: Zip) {
  description 'Create distribution archives containing p2 repository (including R5 index).'
  group       'release'
  inputs.files p2, index
  destinationDir = buildDir
  archiveName    = 'bndtools-latest.zip'
  from             "${buildDir}/p2"
  include          '**'
}
